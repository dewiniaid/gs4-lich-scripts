=begin
	login.lic: A script for logging into other characters from within lich.
	
	Useful for switching characters or logging into characters on other accounts.
	
	This script uses the same entry.dat as lich.rbw.
	list/add/modify/delete commands are available to modify the entry.dat from within the script.
	
	You have the option of running a script(s) at startup.
	
	Please see ;login help for additional informaiton.
	
	author: Phalen33
=end

if $SAFE > 0
	echo "error: This script needs to be trusted to work. (;trust #{script.name})"
	exit
end

if script.vars[1].nil? || script.vars[1] =~ /help/i
	echo "login.lic: A script for logging into other characters from within lich"
	echo
	echo "This script must be trusted before using."
	echo ";trust login"
	echo
	echo "You must first set a realm for use with the script commands."
	echo "login set realm <prime, platinum, shattered>"
	echo
	echo "Your frontend setting will be set using your current client (wizard or stormfront)"
	echo "when using the add or modify command"
	echo
	echo "This script uses the same entry.dat file as the quick game entry in lich.rbw."
	echo "You can add character information using lich.rbw by saving the information for quick game entry."
	echo "You can also use this scripts add/delete/modify options for managing saved character information."
	echo
	echo "List all characters saved in the entry.dat,"
	echo ";login list"
	echo
	echo "Add a character\'s information to the entry.dat file,"
	echo ";login add <character name> <account> <password>"
	echo
	echo "Delete a character from the entry.dat file,"
	echo ";login delete <character name>"
	echo
	echo "Modify the login information for an existing character,"
	echo ";login modify <character name> <account> <password>"
	echo
	echo "Login as a character using saved account information"
	echo ";login <character name>"
	echo
	echo "Login as a character and run a script after logging in."
	echo "Multiple scripts can be run by seperating names with a comma."
	echo ";login <character name> <script>"
	echo ";login <character name> <script1,script2,script3...>"	
	exit
elsif script.vars[1] =~ /set/i
	if script.vars[2] =~ /realm/i
		if script.vars[3] =~ /^(?:platinum|shattered|prime)$/
			CharSettings['realm'] = script.vars[3].downcase
			echo 'setting saved'
			exit
		else
			echo 'Error: The only allowed values are prime, platinum, or shattered.'
			exit
		end
	end
elsif script.vars[1] =~ /list/i
	if File.exists?("#{DATA_DIR}/entry.dat")
		entry_data = File.open("#{DATA_DIR}/entry.dat", 'r') { |file|
		begin
			Marshal.load(file.read.unpack('m').first)
		rescue
			Array.new
		end
		}
	else
		entry_data = Array.new
	end

	echo entry_data.inspect
	entry_data.each { |login_info|
		if login_info[:game_code] == 'GSX'
			realm = 'platinum'
		elsif login_info[:game_code] == 'GSF'
			realm = 'shattered'
		else
			realm = 'prime'
		end
		echo "#{login_info[:char_name]} #{login_info[:user_id]} #{login_info[:password]} #{realm} #{login_info[:frontend]}"
	}
	exit
elsif script.vars[1] =~ /add|delete|modify/i
	if CharSettings['realm']
		realm = CharSettings['realm']
	else
		echo "Error: realm not set."
		echo "Please use ;login set realm <prime, platinum, shattered."
		exit
	end
	if script.vars[1] =~ /add|modify/i && (script.vars[2].nil? || script.vars[3].nil? || script.vars[4].nil?)
		echo "Error: Please use the syntax ;login add/modify <character name> <account name> <password>"
		echo "See ;login help for more information."
		exit
	elsif script.vars[1] =~ /delete/i && script.vars[2].nil?
		echo "Error: Please use the syntax ;login delete <character name>"
		echo "See ;login help for more information."
		exit
	else
		if File.exists?("#{DATA_DIR}/entry.dat")
			entry_data = File.open("#{DATA_DIR}/entry.dat", 'r') { |file|
				begin
					Marshal.load(file.read.unpack('m').first)
				rescue
					Array.new
				end
			}
		else
			entry_data = Array.new
		end
		
		char_name = script.vars[2].capitalize
		user_id = script.vars[3].downcase
		password = script.vars[4]
		game_name = 'GemStone IV'
		frontend = $frontend
		custom_launch = nil
		custom_launch_dir = nil
		
		if realm == 'platinum'
			game_code = 'GSX'
		elsif realm == 'shattered'
			game_code = 'GSF'
		else
			game_code = 'GS3'
		end
		
		data = entry_data.find { |d| (d[:char_name] == char_name) and (d[:game_code] == game_code) }
		
		if script.vars[1] =~ /add/i
			if data
				echo "Error: Add failed.  Character information already exists."
				echo "Please use delete to remove character or modify to update account information"
				exit
			else
				entry_data.push h={ :char_name => char_name, :game_code => game_code, :game_name => game_name, :user_id => user_id, :password => password, :frontend => frontend, :custom_launch => custom_launch, :custom_launch_dir => custom_launch_dir }
			end
		end
		
		if script.vars[1] =~ /delete/i
			if data
				entry_data.delete(data)
				echo "Character deleted."
			else
				echo "Error Character does not exist."
				exit
			end
		end
		
		if script.vars[1] =~ /modify/i
			if data
				entry_data.delete(data)
				entry_data.push h={ :char_name => char_name, :game_code => game_code, :game_name => game_name, :user_id => user_id, :password => password, :frontend => frontend, :custom_launch => custom_launch, :custom_launch_dir => custom_launch_dir }
				echo "Character information updated."
			else
				echo "Error Character does not exist."
				exit
			end
		end
		File.open("#{DATA_DIR}/entry.dat", 'w') { |file|
				file.write([Marshal.dump(entry_data)].pack('m'))
		}
		exit
	end		
else
	char_name = script.vars[1].capitalize
	if script.vars[2]
		start_script = script.vars[2]
	end
end

if CharSettings['realm']
	realm = CharSettings['realm']
else
	echo "Error: realm not set."
	echo "Please use ;login set realm <prime, platinum, shattered."
	exit
end

if File.exists?("#{DATA_DIR}/entry.dat")
	entry_data = File.open("#{DATA_DIR}/entry.dat", 'r') { |file|
	begin
		Marshal.load(file.read.unpack('m').first)
	rescue
		Array.new
	end
	}
else
	echo 'Error: No saved account information found.'
	echo 'Please use the add function to add your character\'s account information.'
	echo 'Use ;login help for more information.'
end

if realm == 'platinum'
	data = entry_data.find { |d| (d[:char_name] == char_name) and (d[:game_code] == 'GSX') }
elsif realm == 'shattered'
	data = entry_data.find { |d| (d[:char_name] == char_name) and (d[:game_code] == 'GSF') }
else
	data = entry_data.find { |d| (d[:char_name] == char_name) and (d[:game_code] == 'GS3') }
end

if data
	login_server = nil
	connect_thread = nil
	timeout_thread = Thread.new {
		sleep 30
		connect_thread.kill rescue()
		login_server = nil
	}
	connect_thread = Thread.new {
		begin
			login_server = TCPSocket.new('eaccess.play.net', 7900)
		rescue
			login_server = nil
			echo 'Error connecting to eaccess.play.net:7900.'
			exit
		end
	}
	connect_thread.join
	timeout_thread.kill rescue()
	
	if login_server
		login_server.puts "K\n"
		hashkey = login_server.gets
		
		password = data[:password].split('').collect { |c| c.getbyte(0) }
		hashkey = hashkey.split('').collect { |c| c.getbyte(0) }
		password.each_index { |i| password[i] = ((password[i]-32)^hashkey[i])+32 }
		password = password.collect { |c| c.chr }.join
		login_server.puts "A\t#{data[:user_id]}\t#{password}\n"
		password = nil
		response = login_server.gets
		login_key = /KEY\t([^\t]+)\t/.match(response).captures.first
		if login_key
			login_server.puts "M\n"
			response = login_server.gets
			
			if response =~ /^M\t/
				login_server.puts "F\t#{data[:game_code]}\n"
				response = login_server.gets
				
				if response =~ /NORMAL|PREMIUM|TRIAL|INTERNAL|FREE/
					login_server.puts "G\t#{data[:game_code]}\n"
					login_server.gets
					login_server.puts "P\t#{data[:game_code]}\n"
					login_server.gets
					login_server.puts "C\n"
					char_code = login_server.gets.sub(/^C\t[0-9]+\t[0-9]+\t[0-9]+\t[0-9]+[\t\n]/, '').scan(/[^\t]+\t[^\t^\n]+/).find { |c| c.split("\t")[1] == data[:char_name] }.split("\t")[0]
					login_server.puts "L\t#{char_code}\tSTORM\n"
					response = login_server.gets
					
					if response =~ /^L\t/
						login_server.close unless login_server.closed?
						launch_data = response.sub(/^L\tOK\t/, '').split("\t")
						
						if data[:frontend] == 'wizard'
							launch_data.collect! { |line| line.sub(/GAMEFILE=.+/, 'GAMEFILE=WIZARD.EXE').sub(/GAME=.+/, 'GAME=WIZ').sub(/FULLGAMENAME=.+/, 'FULLGAMENAME=Wizard Front End') }
						end
						
						if data[:custom_launch]
							launch_data.push "CUSTOMLAUNCH=#{data[:custom_launch]}"
							if data[:custom_launch_dir]
								launch_data.push "CUSTOMLAUNCHDIR=#{data[:custom_launch_dir]}"
							end
						end
						
					else
						login_server.close unless login_server.closed?
						echo "Error: Unrecognized response from server. (#{response})."
						exit
					end
				else
					login_server.close unless login_server.closed?
					echo "Error: Unrecognized response from server. (#{response})."
					exit
				end
			else
				login_server.close unless login_server.closed?
				echo "Error: Unrecognized response from server. (#{response})."
				exit
			end
		else
			login_server.close unless login_server.closed?
			echo "Something went wrong... probably invalid user id and/or password.\nserver response: #{response}"
			exit
		end
	else
		echo "Error: Failed to connect to server."
		exit
	end
else
	echo 'Error: No saved account information found.'
	echo 'Please use the add function to add your character\'s account information.'
	echo 'Use ;login help for more information.'
	exit
end

sal_filename = "#{TEMP_DIR.gsub('/', '\\')}\\login.sal"
File.open(sal_filename, 'w') { |f| f.puts launch_data }

r = Win32.GetModuleFileName
ruby = r[:lpFilename]

if File.exists?(ruby)
	if start_script
		Thread.new {
			system(ruby, "#{LICH_DIR}\\xlich.rb", sal_filename, "--start-scripts=#{start_script}")
		}
	else
		Thread.new {
			# system(ruby, "#{LICH_DIR}\\lich.rbw", sal_filename)
			system(ruby, "#{LICH_DIR}\\xlich.rb", sal_filename)
			# system(ruby, "-E", "ASCII-8BIT:ASCII-8BIT", "#{LICH_DIR}\\xlich.rb", sal_filename)
			# system(ruby, "-E", "US-ASCII:US-ASCII", "#{LICH_DIR}\\lich.rbw", sal_filename)
		}
	end
else
	echo "Error: failed to find rubyw.exe"
end


