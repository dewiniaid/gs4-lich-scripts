=begin
	Moves around searching for a warcamp, derived from Tillmen's wander script and inspired by Casis' warcampfind script.

  Unlike warcampfind, findwarcamp will try to stay local to a disturbance and only ventures to 'cold' rooms if it can't
  find any warm ones.  Thus, for maximal effectiveness, it is best to manually use Sigil of Location every 20-30 rooms
  in your search area until you find interference and only then activate findwarcamp.

	 author: LostRanger (thisgenericname@gmail.com)
	   game: Gemstone
	   tags: movement
	version: 0.1

	changelog:
		0.1 (2017-05-21) derived from Wander 0.6 (2015-04-11):
			initial release
=end

CharSettings['boundary']     ||= Set.new


def check_room_for_warcamp
	return :HOT if GameObj.loot.find{|item| item.name == 'shimmering path' or item.name == 'shimmering patch of air' }
	waitrt?
	fput 'sigil of location'
	line = waitfor 'Roundtime', 'interference with your sigil coming from', 'shimmering pat'
	return :HOT if line =~ /shimmering/
	return :COLD if line =~ /Roundtime/
	:WARM
end

if script.vars[1] =~ /help/i
	output = "\n"
	output.concat ";findwarcamp add              adds the current room to the boundary list\n"
	output.concat ";findwarcamp add <room id>    adds the given room id to the boundary list\n"
	output.concat ";findwarcamp rem              deletes the current room to the boundary list\n"
	output.concat ";findwarcamp rem <room id>    deletes the given room id to the boundary list\n"
	output.concat ";findwarcamp clear            clears the boundary list\n"
	output.concat ";findwarcamp list             shows saved boundaries\n"
	output.concat ";findwarcamp                  start searching for a warcamps\n"
	output.concat "\n"
	respond output
elsif script.vars[1] =~ /^add$|^set$/i
	if script.vars[2]
		for var in script.vars[2..-1]
			if var =~ /^[0-9]+$/
				CharSettings['boundary'].add(var)
				echo "room #{var} has been added to the boundary list"
			else
				echo "ignoring #{var}: not a room id"
			end
		end
	elsif room = Room.current
		CharSettings['boundary'].add(room.id.to_s)
		echo "this room (#{room.id}) has been added to the boundary list"
	else
		echo 'error: current room is unknown'
	end
elsif script.vars[1] =~ /^del(?:ete)?$|^rem(?:ove)?$/i
	if script.vars[2]
		for var in script.vars[2..-1]
			if var =~ /^[0-9]+$/
				if CharSettings['boundary'].delete(var)
					echo "room #{var} has been removed from the boundary list"
				else
					echo "room #{var} was not found in the boundary list"
				end
			else
				echo "ignoring #{var}: not a room id"
			end
		end
	elsif room = Room.current
		if CharSettings['boundary'].delete(room.id.to_s)
			echo "this room (#{room.id}) has been removed from the boundary list"
		else
			echo "this room (#{room.id}) was not found in the boundary list"
		end
	else
		echo 'current room is unknown'
	end
elsif script.vars[1] =~ /^list$/i
	output = "\n"
	if CharSettings['boundary'].empty?
		output.concat "   boundaries: none\n"
	else
		output.concat "   boundaries:\n"
		for boundary in CharSettings['boundary']
			output.concat "      #{boundary.to_s.rjust(5)}   #{Room[boundary].title.first}\n"
		end
	end
	respond output
elsif script.vars[1] =~ /^clear$/i
	CharSettings['boundary'] = Set.new
	respond 'done'
elsif script.vars.empty?
	temp = nil
	searched = Set.new
	warm_frontier = Set.new
	cold_frontier = Set.new
	room = nil

	while temp != :HOT
		last_temp = temp
		previous = room
		room = Room.current

		# Add to searched, remove from frontiers
		searched.add(room.id)
		warm_frontier.delete(room.id)
		cold_frontier.delete(room.id)

		# Check temperature
		temp = check_room_for_warcamp
		if temp == :HOT
			echo "Warcamp found!  Room #{Room.current.id}"
			exit
		end

		echo "Current room is #{temp.to_s} -- Searched: #{searched.length} -- Warm: #{warm_frontier.length} -- Cold: #{cold_frontier.length}"
    waitrt?

		# Iterate over exits and add them to frontiers as appropriate.  Also mark as candidates for next movement
		candidates = {}
		room.wayto.each{|dest, dir|
			idest = dest.to_i
			next if CharSettings['boundary'].include?(idest)  # Skip boundary rooms
			next if searched.include?(idest)  # Skip already-searched rooms
			next if warm_frontier.include?(idest)  # Skip already-warm-frontier room.

			candidates[dest] = dir
			if temp == :COLD
				cold_frontier.add(idest)
			else
				cold_frontier.delete(idest)
				warm_frontier.add(idest)
			end
		}

		# Movement logic:
		# If we're warm, favor candidates.  If we're cold, do this only if the warm frontier is empty.
		command = nil
		unless candidates.empty?
			if temp == :WARM or warm_frontier.empty?
				here = room.id.to_s
				candidates.each{|dest, dir|
					# Prefer direcitons that do not involve procs first.
					if dir.is_a?(String)
						command = dir
						# Break if it's fully backtrackable, too, since there's no better option.
						break if Room[dest].wayto[here].is_a?(String)
					elsif command == nil  # No command set, so begrudgingly take a stringproc
						command = dir
					end
				}
			end
		end

		# If both frontiers are empty, give up.
		if cold_frontier.empty? and warm_frontier.empty?
			echo 'Exhausted search area, giving up.'
			return
		end

		if command
			# If we have a moment command, execute it and go to the next iteration of the loop
			if command.is_a?(String)
				move command
			else
				command.call
			end
			wait_until { Room.current.id != room.id }
			next
		end

		# If we're still here, there was no reasonable direct movement.
		# Find the nearest frontier room and go2 it.
		target = room.find_nearest(((warm_frontier.empty? and cold_frontier) or warm_frontier))
		i_stand_alone
		start_script 'go2', [target.to_s]
		wait_until { Room.current.id == target }
		i_stand_alone
	end
end
